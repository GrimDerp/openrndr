buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:0.9.17"
        classpath "com.netflix.nebula:nebula-kotlin-plugin:1.3.61"
        classpath "com.netflix.nebula:nebula-publishing-plugin:14.1.1"
        classpath "com.netflix.nebula:nebula-release-plugin:13.2.0"
        classpath "com.netflix.nebula:nebula-bintray-plugin:7.5.0"
    }
}

plugins {
    // plugin dependencies, load without applying them

//    id 'com.jfrog.artifactory' version '4.11.0' apply false
//
//    id 'nebula.contacts' version '5.1.0' apply false
//    id 'nebula.info' version '5.2.0' apply false
//    id 'nebula.dependency-lock' version '8.3.0' apply false
//
//    id 'nebula.maven-publish' version '14.1.1' apply false
//    id 'nebula.nebula-bintray' version '7.5.0' apply false
//    id 'nebula.release' version '13.2.0' apply false
//
//    id 'nebula.source-jar' version '14.1.1' apply false

}

apply plugin: 'org.jetbrains.dokka'

project.ext {
    lwjglVersion = '3.2.3'
    ffmpeg_version = '4.2.1-1.5.2'
    kotlinVersion = '1.3.61'
    spekVersion = '2.0.9'
}

dokka {
    moduleName = "$rootProject.name"
    outputDirectory = "$buildDir/docs"
    outputFormat = "html"
    includes = ['Module.md']

    sourceDirs = files(subprojects.collect { p -> new File(p.projectDir, "/src/main/kotlin") })
    if (!System.properties['os.name'].toLowerCase().contains('windows')) {
        doLast {
            exec {
                executable "./dokka/postbuild.sh"
            }
        }
    }
}

allprojects {
    apply plugin: 'idea'
    apply plugin: 'java'
    apply plugin: 'nebula.kotlin'
    apply plugin: 'nebula.contacts'
    apply plugin: 'nebula.info'
//    apply plugin: 'nebula.dependency-lock'

    apply plugin: 'nebula.release'
    // selectively apply only the bintray plugin, snapshots are not published
    // nebula-bintray needs to happened after nebula-release since version isn't lazy in the bintray extension

    apply plugin: 'nebula.source-jar'
    apply plugin: 'nebula.maven-publish'
    apply plugin: 'nebula.nebula-bintray-publishing'



    group 'org.openrndr'

    repositories {
        jcenter()
        maven {
            url "https://dl.bintray.com/spekframework/spek"
        }
    }

    dependencies {
        implementation 'io.github.microutils:kotlin-logging:1.7.8'
        implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.2'

        testImplementation "org.spekframework.spek2:spek-dsl-jvm:$spekVersion"
        testImplementation "org.amshove.kluent:kluent:1.57"
        testImplementation "org.jetbrains.kotlin:kotlin-test:$kotlinVersion"
        testRuntimeOnly "org.spekframework.spek2:spek-runner-junit5:$spekVersion"
        testRuntimeOnly "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"

    }

    test {
        useJUnitPlatform {
            includeEngines 'spek2'
        }
    }


    /*
    if (System.getenv('TRAVIS') == null) {
        task runJupiter(type: JavaExec) {
            if (System.properties['os.name'].toLowerCase().contains('mac')) {
               jvmArgs '-XstartOnFirstThread'
            }
            classpath = project.sourceSets.test.runtimeClasspath
            main 'org.junit.platform.console.ConsoleLauncher'
            args '--scan-class-path'
            args "--reports-dir=$project.testReportDir"
        }
        test.dependsOn runJupiter
    }*/

    contacts {
        'edwin@openrndr.org' {
            moniker 'Edwin Jakobs'
            github 'edwinRNDR'
        }
    }

    bintray {
        user = findProperty('bintrayUser') ?: System.getenv('BINTRAY_USER')
        apiKey = findProperty('bintrayKey') ?: System.getenv('BINTRAY_KEY')
        userOrg = 'openrndr'
        repo = 'openrndr'
        pkgName = 'openrndr'
        gppSign = false
        syncToMavenCentral = false
        licenses = ['BSD-2-Clause']
        vcsUrl = 'https://github.com/openrndr/openrndr.git'
        websiteUrl = 'https://www.openrndr.org'
        issueTrackerUrl = 'https://github.com/openrndr/openrndr/issues'
        labels = ['creative-coding', 'realtime-rendering', 'opengl']
    }
}

configure(subprojects) {
    tasks.withType(org.jetbrains.kotlin.gradle.tasks.AbstractKotlinCompile).all {
        kotlinOptions.freeCompilerArgs += ["-Xuse-experimental=kotlinx.coroutines.InternalCoroutinesApi"]
    }
}

